////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./board.h
//
// Project:	ZipVersa, Versa Brd implementation using ZipCPU infrastructure
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga autofpga -d -o . allclocks.txt global.txt dlyarbiter.txt version.txt buserr.txt pwrcount.txt wbfft.txt spio.txt gpio.txt wbuconsole.txt bkram.txt flash.txt picorv.txt pic.txt mdio1.txt enet.txt enetscope.txt flashscope.txt mem_flash_bkram.txt mem_bkram_only.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2019, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
#ifndef	BOARD_H
#define	BOARD_H

// And, so that we can know what is and isn't defined
// from within our main.v file, let's include:
#include <design.h>

#ifndef WBSCOPE_H
#define WBSCOPE_H

#define WBSCOPE_NO_RESET        0x80000000u
#define WBSCOPE_TRIGGER         (WBSCOPE_NO_RESET|0x08000000u)
#define WBSCOPE_MANUAL          (WBSCOPE_TRIGGER)
#define WBSCOPE_DISABLE         0x04000000u

typedef struct WBSCOPE_S {
        unsigned s_ctrl, s_data;
} WBSCOPE;
#endif


// Network packet interface
#define	ENET_TXGO		0x004000
#define	ENET_TXBUSY		0x004000
#define	ENET_NOHWCRC		0x008000
#define	ENET_NOHWMAC		0x010000
#define	ENET_RESET		0x020000
#define	ENET_NOHWIPCHK		0x040000
#define	ENET_TXCMD(LEN)		((LEN)|ENET_TXGO)
#define	ENET_TXCLR		0x038000
#define	ENET_TXCANCEL		0x000000
#define	ENET_RXAVAIL		0x004000
#define	ENET_RXBUSY		0x008000
#define	ENET_RXMISS		0x010000
#define	ENET_RXERR		0x020000
#define	ENET_RXCRC		0x040000	// Set on a CRC error
#define	ENET_RXLEN		rxcmd & 0x0ffff
#define	ENET_RXCLR		0x004000
#define	ENET_RXBROADCAST	0x080000
#define	ENET_RXCLRERR		0x078000
#define	ENET_TXBUFLN(NET)	(1<<(NET.txcmd>>24))
#define	ENET_RXBUFLN(NET)	(1<<(NET.rxcmd>>24))
typedef	struct ENETPACKET_S {
	unsigned	n_rxcmd, n_txcmd;
	unsigned long	n_mac;
	unsigned	n_rxmiss, n_rxerr, n_rxcrc, n_txcol;
} ENETPACKET;

#define	SYSINT_ENETRX	SYSINT(@$(INT.NETRX.syspic.ID))
#define	SYSINT_ENETTX	SYSINT(@$(INT.NETTX.syspic.ID))



//
// The Ethernet MDIO1 interface
//
#define MDIO1_BMCR	0x00
#define MDIO1_BMSR	0x01
#define MDIO1_PHYIDR1	0x02
#define MDIO1_PHYIDR2	0x03
#define MDIO1_ANAR	0x04
#define MDIO1_ANLPAR	0x05
#define MDIO1_ANLPARNP	0x05	// Duplicate register address
#define MDIO1_ANER	0x06
#define MDIO1_ANNPTR	0x07
#define MDIO1_PHYSTS	0x10
#define MDIO1_FCSCR	0x14
#define MDIO1_RECR	0x15
#define MDIO1_PCSR	0x16
#define MDIO1_RBR	0x17
#define MDIO1_LEDCR	0x18
#define MDIO1_PHYCR	0x19
#define MDIO1_BTSCR	0x1a
#define MDIO1_CDCTRL	0x1b
#define MDIO1_EDCR	0x1d

#ifndef	MDIO_H
#define	MDIO_H

typedef struct ENETMDIO_S {
	unsigned	e_v[32];
} ENETMDIO;

#endif // MDIO_H



typedef struct  CONSOLE_S {
	unsigned	u_setup;
	unsigned	u_fifo;
	unsigned	u_rx, u_tx;
} CONSOLE;

#define	_uart_txbusy	((_uart->u_fifo & 0x10000)==0)




#ifndef WBSCOPE_H
#define WBSCOPE_H

#define WBSCOPE_NO_RESET        0x80000000u
#define WBSCOPE_TRIGGER         (WBSCOPE_NO_RESET|0x08000000u)
#define WBSCOPE_MANUAL          (WBSCOPE_TRIGGER)
#define WBSCOPE_DISABLE         0x04000000u

typedef struct WBSCOPE_S {
        unsigned s_ctrl, s_data;
} WBSCOPE;
#endif


#define BUSPIC(X) (1<<X)


//
// GPIO input wires
//
#define	GPIO_IN(WIRE)	(((WIRE)>>16)&1)
//
// GPIO output wires
//
#define	GPIO_SET(WIRE)	(((WIRE)<<16)|(WIRE))
#define	GPIO_CLR(WIRE)	 ((WIRE)<<16)

#define GPIO_ICLK_SDA		1
#define GPIO_ICLK_SCL		2
#define GPIO_ICLK_LOCKED	4
#define GPIO_ICLK_RESET		4
#define GPIO_HALT_SIM		4
//
//


#ifdef	FLASHSCOPE_SCOPC
#define	_BOARD_HAS_FLASHSCOPE
static volatile WBSCOPE *const _flashdbg = ((WBSCOPE *)0x00300000);
#endif	// FLASHSCOPE_SCOPC
#define	_BOARD_HAS_ENETB
static volatile unsigned *const _netbrx = ((unsigned *)0x00800000);
static volatile unsigned *const _netbtx = ((unsigned *)(0x00800000 + (0x0400<<1)));
#ifdef	NET1_ACCESS
#define	_BOARD_HAS_ENETP
static volatile ENETPACKET *const _net1 = ((ENETPACKET *)0x00500000);
#endif	// NET1_ACCESS
#ifdef	NETCTRL1_ACCESS
#define	_BOARD_HAS_NETMDIO1
static volatile ENETMDIO *const _mdio1 = ((ENETMDIO *)7340032);
#endif	// NETCTRL1_ACCESS
#ifdef	BKRAM_ACCESS
#define	_BOARD_HAS_BKRAM
extern char	_bkram[0x00010000];
#endif	// BKRAM_ACCESS
#ifdef	BUSCONSOLE_ACCESS
#define	_BOARD_HAS_BUSCONSOLE
static volatile CONSOLE *const _uart = ((CONSOLE *)4194304);
#endif	// BUSCONSOLE_ACCESS
#ifdef	FLASH_ACCESS
#define	_BOARD_HAS_FLASH
extern int _flash[1];
#endif	// FLASH_ACCESS
#define	_BOARD_HAS_BUILDTIME
#ifdef	SPIO_ACCESS
#define	_BOARD_HAS_SPIO
static volatile unsigned *const _spio = ((unsigned *)6291476);
#endif	// SPIO_ACCESS
#ifdef	NETSCOPE_SCOPE
#define	_BOARD_HAS_NETSCOPE
static volatile WBSCOPE *const _enetscope = ((WBSCOPE *)0x00200000);
#endif	// NETSCOPE_SCOPE
#ifdef	BUSPIC_ACCESS
#define	_BOARD_HAS_BUSPIC
static volatile unsigned *const _buspic = ((unsigned *)0x00600008);
#endif	// BUSPIC_ACCESS
#ifdef	PWRCOUNT_ACCESS
static volatile unsigned *const _pwrcount = ((unsigned *)0x00600010);
#endif	// PWRCOUNT_ACCESS
#define	_BOARD_HAS_BUSERR
static volatile unsigned *const _buserr = ((unsigned *)6291460);
#ifdef	GPIO_ACCESS
#define	_BOARD_HAS_GPIO
static volatile unsigned *const _gpio = ((unsigned *)6291468);
#endif	// GPIO_ACCESS
#ifdef	FLASHCFG_ACCESS
#define	_BOARD_HAS_FLASHCFG
static volatile unsigned * const _flashcfg = ((unsigned *)(0x00100000));
#endif	// FLASHCFG_ACCESS
#define	_BOARD_HAS_VERSION
#ifdef	WBFFT_ACCESS
#define	_BOARD_HAS_WBFFT
extern int _wbfft[1];
#endif	// WBFFT_ACCESS
//
// Interrupt assignments (2 PICs)
//
// PIC: buspic
#define	BUSPIC_FLASHDBG	BUSPIC(0)
#define	BUSPIC_SPIO	BUSPIC(1)
#define	BUSPIC_ENETSCOPE	BUSPIC(2)
// PIC: picorv
#define	PICORV_NETTX	PICORV(0)
#define	PICORV_NETRX	PICORV(1)
#define	PICORV_UARTTXF	PICORV(2)
#define	PICORV_UARTRXF	PICORV(3)
#define	PICORV_GPIO	PICORV(4)
#endif	// BOARD_H
