////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./regdefs.h
//
// Project:	ZipVersa, Versa Brd implementation using ZipCPU infrastructure
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga autofpga -d -o . allclocks.txt global.txt dlyarbiter.txt version.txt buserr.txt pic.txt pwrcount.txt spio.txt gpio.txt rtclight.txt wbuconsole.txt bkram.txt flash.txt zipmaster.txt netclockctr.txt mdio1.txt enet.txt enetscope.txt flashscope.txt mem_flash_bkram.txt mem_bkram_only.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2019, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
#ifndef	REGDEFS_H
#define	REGDEFS_H


//
// The @REGDEFS.H.INCLUDE tag
//
// @REGDEFS.H.INCLUDE for masters
// @REGDEFS.H.INCLUDE for peripherals
// And finally any master REGDEFS.H.INCLUDE tags
// End of definitions from REGDEFS.H.INCLUDE


//
// Register address definitions, from @REGS.#d
//
// FLASH erase/program configuration registers
#define	R_FLASHCFG      	0x00100000	// 00100000, wbregs names: FLASHCFG, QSPIC
// enetscope scope
#define	R_NETSCOPE      	0x00200000	// 00200000, wbregs names: NETSCOPE
#define	R_NETSCOPED     	0x00200004	// 00200000, wbregs names: NETSCOPED
// flashdbg compressed scope
#define	R_FLASHSCOPE    	0x00300000	// 00300000, wbregs names: FLASHSCOPE
#define	R_FLASHSCOPED   	0x00300004	// 00300000, wbregs names: FLASHSCOPED
// CONSOLE registers
#define	R_CONSOLE_FIFO  	0x00400004	// 00400000, wbregs names: UFIFO
#define	R_CONSOLE_UARTRX	0x00400008	// 00400000, wbregs names: RX
#define	R_CONSOLE_UARTTX	0x0040000c	// 00400000, wbregs names: TX
#define	R_NET_RXCMD     	0x00500000	// 00500000, wbregs names: RXCMD, NETRX
#define	R_NET_TXCMD     	0x00500004	// 00500000, wbregs names: TXCMD, NETTX
#define	R_NET_MACHI     	0x00500008	// 00500000, wbregs names: MACHI
#define	R_NET_MACLO     	0x0050000c	// 00500000, wbregs names: MACLO
#define	R_NET_RXMISS    	0x00500010	// 00500000, wbregs names: NETMISS
#define	R_NET_RXERR     	0x00500014	// 00500000, wbregs names: NETERR
#define	R_NET_RXCRC     	0x00500018	// 00500000, wbregs names: NETCRCER
#define	R_NET_TXCOL     	0x0050001c	// 00500000, wbregs names: NETCOL
// RTC clock registers
#define	R_CLOCK         	0x00600000	// 00600000, wbregs names: CLOCK
#define	R_TIMER         	0x00600004	// 00600000, wbregs names: TIMER
#define	R_STOPWATCH     	0x00600008	// 00600000, wbregs names: STOPWATCH
#define	R_CKALARM       	0x0060000c	// 00600000, wbregs names: ALARM, CKALARM
#define	R_CKSPEED       	0x00600010	// 00600000, wbregs names: CKSPEED
#define	R_BUILDTIME     	0x00700000	// 00700000, wbregs names: BUILDTIME
#define	R_BUILDTIME     	0x00700000	// 00700000, wbregs names: BUILDTIME
#define	R_BUSERR        	0x00700004	// 00700004, wbregs names: BUSERR
#define	R_BUSERR        	0x00700004	// 00700004, wbregs names: BUSERR
#define	R_PIC           	0x00700008	// 00700008, wbregs names: PIC
#define	R_PIC           	0x00700008	// 00700008, wbregs names: PIC
#define	R_GPIO          	0x0070000c	// 0070000c, wbregs names: GPIO, GPI, GPO
#define	R_GPIO          	0x0070000c	// 0070000c, wbregs names: GPIO, GPI, GPO
// Network RX clock counter (measures clock speed)
#define	R_NETRXCLK      	0x00700010	// 00700010, wbregs names: NETRXCLK
// Network RX clock counter (measures clock speed)
#define	R_NETRXCLK      	0x00700010	// 00700010, wbregs names: NETRXCLK
// Network TX clock counter (measures clock speed)
#define	R_NETTXCLK      	0x00700014	// 00700014, wbregs names: NETTXCLK
// Network TX clock counter (measures clock speed)
#define	R_NETTXCLK      	0x00700014	// 00700014, wbregs names: NETTXCLK
#define	R_PWRCOUNT      	0x00700018	// 00700018, wbregs names: PWRCOUNT
#define	R_PWRCOUNT      	0x00700018	// 00700018, wbregs names: PWRCOUNT
#define	R_SPIO          	0x0070001c	// 0070001c, wbregs names: SPIO
#define	R_SPIO          	0x0070001c	// 0070001c, wbregs names: SPIO
#define	R_VERSION       	0x00700020	// 00700020, wbregs names: VERSION
#define	R_VERSION       	0x00700020	// 00700020, wbregs names: VERSION
// Ethernet configuration MDIO1 port
#define	R_MDIO1_BMCR    	0x00800000	// 00800000, wbregs names: BMCR
#define	R_MDIO1_BMSR    	0x00800004	// 00800000, wbregs names: BMSR
#define	R_MDIO1_PHYIDR1 	0x00800008	// 00800000, wbregs names: PHYIDR1
#define	R_MDIO1_PHYIDR2 	0x0080000c	// 00800000, wbregs names: PHYIDR2
#define	R_MDIO1_ANAR    	0x00800010	// 00800000, wbregs names: ANAR
#define	R_MDIO1_ANLPAR  	0x00800014	// 00800000, wbregs names: ANLPAR
#define	R_MDIO1_ANER    	0x00800018	// 00800000, wbregs names: ANER
#define	R_MDIO1_ANNPTR  	0x0080001c	// 00800000, wbregs names: ANNPTR
#define	R_MDIO1_ANNPRR  	0x00800020	// 00800000, wbregs names: ANNPRR
#define	R_MDIO1_GBECTRL 	0x00800024	// 00800000, wbregs names: GBECTRL
#define	R_MDIO1_GBESTAT 	0x00800028	// 00800000, wbregs names: GBESTAT
#define	R_NET_RXBUF     	0x00900000	// 00900000, wbregs names: NETRXB
#define	R_NET_TXBUF     	0x00904000	// 00900000, wbregs names: NETTXB
#define	R_BKRAM         	0x00a00000	// 00a00000, wbregs names: RAM
#define	R_FLASH         	0x01000000	// 01000000, wbregs names: FLASH


//
// The @REGDEFS.H.DEFNS tag
//
// @REGDEFS.H.DEFNS for masters
#define	R_ZIPCTRL	0x02000000
#define	R_ZIPDATA	0x02000004
#define	BAUDRATE	1000000
#define	CLKFREQHZ 50000000
// @REGDEFS.H.DEFNS for peripherals
#define	FLASHBASE	0x01000000
#define	FLASHLEN	0x01000000
#define	FLASHLGLEN	24
//
#define	FLASH_RDDELAY	0
#define	FLASH_NDUMMY	2
//
#define	BKRAMBASE	0x00a00000
#define	BKRAMLEN	0x00010000
// @REGDEFS.H.DEFNS at the top level
// End of definitions from REGDEFS.H.DEFNS
//
// The @REGDEFS.H.INSERT tag
//
// @REGDEFS.H.INSERT for masters

#define	CPU_GO		0x0000
#define	CPU_RESET	0x0040
#define	CPU_INT		0x0080
#define	CPU_STEP	0x0100
#define	CPU_STALL	0x0200
#define	CPU_HALT	0x0400
#define	CPU_CLRCACHE	0x0800
#define	CPU_sR0		0x0000
#define	CPU_sSP		0x000d
#define	CPU_sCC		0x000e
#define	CPU_sPC		0x000f
#define	CPU_uR0		0x0010
#define	CPU_uSP		0x001d
#define	CPU_uCC		0x001e
#define	CPU_uPC		0x001f

#ifdef	FLASH_ACCESS
#define	RESET_ADDRESS	0x01400000
#else
#define	RESET_ADDRESS	0x00a00000
#endif


// @REGDEFS.H.INSERT for peripherals
// Network packet interface
#define	ENET_TXGO		0x004000
#define	ENET_TXBUSY		0x004000
#define	ENET_NOHWCRC		0x008000
#define	ENET_NOHWMAC		0x010000
#define	ENET_RESET		0x020000
#define	ENET_NOHWIPCHK		0x040000
#define	ENET_TXCMD(LEN)		((LEN)|ENET_TXGO)
#define	ENET_TXCLR		0x038000
#define	ENET_TXCANCEL		0x000000
#define	ENET_RXAVAIL		0x004000
#define	ENET_RXBUSY		0x008000
#define	ENET_RXMISS		0x010000
#define	ENET_RXERR		0x020000
#define	ENET_RXCRC		0x040000	// Set on a CRC error
#define	ENET_RXLEN		rxcmd & 0x0ffff
#define	ENET_RXCLR		0x004000
#define	ENET_RXBROADCAST	0x080000
#define	ENET_RXCLRERR		0x078000

// Flash control constants
#define	QSPI_FLASH	// This core and hardware support a Quad SPI flash
#define	SZPAGEB		256
#define	PGLENB		256
#define	SZPAGEW		64
#define	PGLENW		64
#define	NPAGES		256
#define	SECTORSZB	(NPAGES * SZPAGEB)	// In bytes, not words!!
#define	SECTORSZW	(NPAGES * SZPAGEW)	// In words
#define	NSECTORS	64
#define	SECTOROF(A)	((A) & (-1<<16))
#define	SUBSECTOROF(A)	((A) & (-1<<12))
#define	PAGEOF(A)	((A) & (-1<<8))

// @REGDEFS.H.INSERT from the top level
typedef	struct {
	unsigned	m_addr;
	const char	*m_name;
} REGNAME;

extern	const	REGNAME	*bregs;
extern	const	int	NREGS;
// #define	NREGS	(sizeof(bregs)/sizeof(bregs[0]))

extern	unsigned	addrdecode(const char *v);
extern	const	char *addrname(const unsigned v);
// End of definitions from REGDEFS.H.INSERT


#endif	// REGDEFS_H
