////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./regdefs.h
//
// Project:	ZipVersa, Versa Brd implementation using ZipCPU infrastructure
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga autofpga -d -o . allclocks.txt global.txt dlyarbiter.txt version.txt buserr.txt pic.txt pwrcount.txt spio.txt gpio.txt rtclight.txt wbuconsole.txt bkram.txt zipmaster.txt netclockctr.txt mdio1.txt enet.txt mem_flash_bkram.txt mem_bkram_only.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2019, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
#ifndef	REGDEFS_H
#define	REGDEFS_H


//
// The @REGDEFS.H.INCLUDE tag
//
// @REGDEFS.H.INCLUDE for masters
// @REGDEFS.H.INCLUDE for peripherals
// And finally any master REGDEFS.H.INCLUDE tags
// End of definitions from REGDEFS.H.INCLUDE


//
// Register address definitions, from @REGS.#d
//
// CONSOLE registers
#define	R_CONSOLE_FIFO  	0x00001004	// 00001000, wbregs names: UFIFO
#define	R_CONSOLE_UARTRX	0x00001008	// 00001000, wbregs names: RX
#define	R_CONSOLE_UARTTX	0x0000100c	// 00001000, wbregs names: TX
#define	R_NET_RXCMD     	0x00002000	// 00002000, wbregs names: RXCMD, NETRX
#define	R_NET_TXCMD     	0x00002004	// 00002000, wbregs names: TXCMD, NETTX
#define	R_NET_MACHI     	0x00002008	// 00002000, wbregs names: MACHI
#define	R_NET_MACLO     	0x0000200c	// 00002000, wbregs names: MACLO
#define	R_NET_RXMISS    	0x00002010	// 00002000, wbregs names: NETMISS
#define	R_NET_RXERR     	0x00002014	// 00002000, wbregs names: NETERR
#define	R_NET_RXCRC     	0x00002018	// 00002000, wbregs names: NETCRCER
#define	R_NET_TXCOL     	0x0000201c	// 00002000, wbregs names: NETCOL
// RTC clock registers
#define	R_CLOCK         	0x00003000	// 00003000, wbregs names: CLOCK
#define	R_TIMER         	0x00003004	// 00003000, wbregs names: TIMER
#define	R_STOPWATCH     	0x00003008	// 00003000, wbregs names: STOPWATCH
#define	R_CKALARM       	0x0000300c	// 00003000, wbregs names: ALARM, CKALARM
#define	R_CKSPEED       	0x00003010	// 00003000, wbregs names: CKSPEED
#define	R_BUILDTIME     	0x00004000	// 00004000, wbregs names: BUILDTIME
#define	R_BUILDTIME     	0x00004000	// 00004000, wbregs names: BUILDTIME
#define	R_BUSERR        	0x00004004	// 00004004, wbregs names: BUSERR
#define	R_BUSERR        	0x00004004	// 00004004, wbregs names: BUSERR
#define	R_PIC           	0x00004008	// 00004008, wbregs names: PIC
#define	R_PIC           	0x00004008	// 00004008, wbregs names: PIC
#define	R_GPIO          	0x0000400c	// 0000400c, wbregs names: GPIO, GPI, GPO
#define	R_GPIO          	0x0000400c	// 0000400c, wbregs names: GPIO, GPI, GPO
// Network RX clock counter (measures clock speed)
#define	R_NETRXCLK      	0x00004010	// 00004010, wbregs names: NETRXCLK
// Network RX clock counter (measures clock speed)
#define	R_NETRXCLK      	0x00004010	// 00004010, wbregs names: NETRXCLK
// Network TX clock counter (measures clock speed)
#define	R_NETTXCLK      	0x00004014	// 00004014, wbregs names: NETTXCLK
// Network TX clock counter (measures clock speed)
#define	R_NETTXCLK      	0x00004014	// 00004014, wbregs names: NETTXCLK
#define	R_PWRCOUNT      	0x00004018	// 00004018, wbregs names: PWRCOUNT
#define	R_PWRCOUNT      	0x00004018	// 00004018, wbregs names: PWRCOUNT
#define	R_SPIO          	0x0000401c	// 0000401c, wbregs names: SPIO
#define	R_SPIO          	0x0000401c	// 0000401c, wbregs names: SPIO
#define	R_VERSION       	0x00004020	// 00004020, wbregs names: VERSION
#define	R_VERSION       	0x00004020	// 00004020, wbregs names: VERSION
// Ethernet configuration MDIO1 port
#define	R_MDIO1_BMCR    	0x00005000	// 00005000, wbregs names: BMCR
#define	R_MDIO1_BMSR    	0x00005004	// 00005000, wbregs names: BMSR
#define	R_MDIO1_PHYIDR1 	0x00005008	// 00005000, wbregs names: PHYIDR1
#define	R_MDIO1_PHYIDR2 	0x0000500c	// 00005000, wbregs names: PHYIDR2
#define	R_MDIO1_ANAR    	0x00005010	// 00005000, wbregs names: ANAR
#define	R_MDIO1_ANLPAR  	0x00005014	// 00005000, wbregs names: ANLPAR
#define	R_MDIO1_ANER    	0x00005018	// 00005000, wbregs names: ANER
#define	R_MDIO1_ANNPTR  	0x0000501c	// 00005000, wbregs names: ANNPTR
#define	R_MDIO1_PHYSTS  	0x00005040	// 00005000, wbregs names: PHYSYTS
#define	R_MDIO1_FCSCR   	0x00005050	// 00005000, wbregs names: FCSCR
#define	R_MDIO1_RECR    	0x00005054	// 00005000, wbregs names: RECR
#define	R_MDIO1_PCSR    	0x00005058	// 00005000, wbregs names: PCSR
#define	R_MDIO1_RBR     	0x0000505c	// 00005000, wbregs names: RBR
#define	R_MDIO1_LEDCR   	0x00005060	// 00005000, wbregs names: LEDCR
#define	R_MDIO1_PHYCR   	0x00005064	// 00005000, wbregs names: PHYCR
#define	R_MDIO1_BTSCR   	0x00005068	// 00005000, wbregs names: BTSCR
#define	R_MDIO1_CDCTRL  	0x0000506c	// 00005000, wbregs names: CDCTRL
#define	R_MDIO1_EDCR    	0x00005074	// 00005000, wbregs names: EDCR
#define	R_NET_RXBUF     	0x00008000	// 00008000, wbregs names: NETRXB
#define	R_NET_TXBUF     	0x0000c000	// 00008000, wbregs names: NETTXB
#define	R_BKRAM         	0x00010000	// 00010000, wbregs names: RAM


//
// The @REGDEFS.H.DEFNS tag
//
// @REGDEFS.H.DEFNS for masters
#define	R_ZIPCTRL	0x00020000
#define	R_ZIPDATA	0x00020004
#define	BAUDRATE	1000000
// @REGDEFS.H.DEFNS for peripherals
#define	BKRAMBASE	0x00010000
#define	BKRAMLEN	0x00010000
// @REGDEFS.H.DEFNS at the top level
// End of definitions from REGDEFS.H.DEFNS
//
// The @REGDEFS.H.INSERT tag
//
// @REGDEFS.H.INSERT for masters

#define	CPU_GO		0x0000
#define	CPU_RESET	0x0040
#define	CPU_INT		0x0080
#define	CPU_STEP	0x0100
#define	CPU_STALL	0x0200
#define	CPU_HALT	0x0400
#define	CPU_CLRCACHE	0x0800
#define	CPU_sR0		0x0000
#define	CPU_sSP		0x000d
#define	CPU_sCC		0x000e
#define	CPU_sPC		0x000f
#define	CPU_uR0		0x0010
#define	CPU_uSP		0x001d
#define	CPU_uCC		0x001e
#define	CPU_uPC		0x001f

#ifdef	FLASH_ACCESS
#define	RESET_ADDRESS	0x00410000
#else
#define	RESET_ADDRESS	0x00010000
#endif


// @REGDEFS.H.INSERT for peripherals
// Network packet interface
#define	ENET_TXGO		0x004000
#define	ENET_TXBUSY		0x004000
#define	ENET_NOHWCRC		0x008000
#define	ENET_NOHWMAC		0x010000
#define	ENET_RESET		0x020000
#define	ENET_NOHWIPCHK		0x040000
#define	ENET_TXCMD(LEN)		((LEN)|ENET_TXGO)
#define	ENET_TXCLR		0x038000
#define	ENET_TXCANCEL		0x000000
#define	ENET_RXAVAIL		0x004000
#define	ENET_RXBUSY		0x008000
#define	ENET_RXMISS		0x010000
#define	ENET_RXERR		0x020000
#define	ENET_RXCRC		0x040000	// Set on a CRC error
#define	ENET_RXLEN		rxcmd & 0x0ffff
#define	ENET_RXCLR		0x004000
#define	ENET_RXBROADCAST	0x080000
#define	ENET_RXCLRERR		0x078000

// @REGDEFS.H.INSERT from the top level
typedef	struct {
	unsigned	m_addr;
	const char	*m_name;
} REGNAME;

extern	const	REGNAME	*bregs;
extern	const	int	NREGS;
// #define	NREGS	(sizeof(bregs)/sizeof(bregs[0]))

extern	unsigned	addrdecode(const char *v);
extern	const	char *addrname(const unsigned v);
// End of definitions from REGDEFS.H.INSERT


#endif	// REGDEFS_H
