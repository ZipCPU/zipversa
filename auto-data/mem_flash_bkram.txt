################################################################################
##
## Filename: 	mem_flash_bkram.txt
##
## Project:	ZipVersa, Versa Brd implementation using ZipCPU infrastructure
##
## Purpose:	Describes a memory model containing nothing more than flash
##		and block RAM.  This will be used to create a board.ld linker
##	script that can be used to link ZipCPU programs.
##
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2019, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
##
@PREFIX=mem_flash_bkram
@MASTER.TYPE=CPU
@MASTER.BUS=@$(CPUBUS)
@LD.FILE=board.ld
@$ENDOFHEAP=@$(bkram.REGBASE)+3*@$(bkram.NADDR);
@LD.DEFNS=
/* LD.DEFNS from zipmaster.txt */
_kram  = 0; /* No high-speed kernel RAM */
_ram   = ORIGIN(bkram);
_rom   = ORIGIN(flash);
_top_of_stack = ORIGIN(bkram) + LENGTH(bkram);
_end_of_heap = @$[0x%08x](ENDOFHEAP);

@LD.ENTRY=@$(cpu.STARTSYM)
@LD.SCRIPT=
/* LD.SCRIPT from zipmaster.txt */
SECTIONS
{
       .rocode @$[0x%08x](cpu.RESET_ADDRESS) : ALIGN(4) {
		_boot_address = .;
		*(.start) *(.boot)
		*(.text.startup)
		*(.srocode*)
		*(.text*)
		*(.srodata*)
		*(.rodata*)
		*(.strings)
		. = ALIGN(4);
       } > flash
	. = ALIGN(4);
	_kram_start = . ;
	_kram_end = . ;
	_ram_image_start = . ;
	__global_pointer$ = .;
	.kernel : ALIGN_WITH_INPUT {
		*(.irq)	/* IRQ registers and stack */
		*(.eh_frame)
		*(.init_array)
		*(.fini_array)
               *(.kernel)
               *(.ramcode)
               *(.data) *(COMMON)
               *(.sdata)
		. = ALIGN(4);
               }> bkram AT> flash
       _ram_image_end = . ;
       _edata = . ;
       .bss : ALIGN_WITH_INPUT {
		. = ALIGN(4);
               *(.bss)
               *(.sbss)
		. = ALIGN(4);
               _bss_image_end = . ;
               } > bkram
       _end = . ;
       _top_of_heap = .;
}
#
