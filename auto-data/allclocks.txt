################################################################################
##
## Filename: 	allclocks.txt
##
## Project:	ZipVersa, Versa Brd implementation using ZipCPU infrastructure
##
## Purpose:	
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2019, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
@PREFIX=iclock
@CLOCK.NAME=clk
@CLOCK.WIRE=i_clk
@CLOCK.FREQUENCY=50000000
@CLOCK.TOP=i_clk
#
#
@PREFIX=masterclk
@TOP.DEFNS=
	// reg	[2:0]	locked;
	reg		s_reset;
	wire		s_clk, s_clk_125mhz, s_clk_125d;
/*
	wire	sysclk_locked, sysclk_feedback,
		s_clk_125mhz,  s_clk_125_unbuffered,
		s_clk_125d,    s_clk_125d_unbuffered,
		s_clksync,     s_clksync_unbuffered,
		s_clk4x,       s_clk4x_unbuffered,
		netclk_locked, netclk_feedback;
	wire	i_clk_buffered;
	wire	clocks_locked;
	reg	[3:0]	sysclk_stable, netclk_stable,
			upper_plls_stable;
*/
@TOP.PORTLIST=
@TOP.IODECL=
@TOP.MAIN=
		// PLL generated clocks
		s_clk_125mhz
@TOP.INSERT=
	CLKDIVF	clock_divider(.CLKI(i_clk),
		.RST(0), .ALIGNWD(1'b0), .CDIVX(s_clk));

	assign	s_clk_125mhz = i_clk_125mhz;
	assign	s_clk_125d   = i_clk_125mhz;

	// There is no incoming clock locked pin.
	//
	// initial	locked = 0;
	// always @(posedge s_clk)
	//	locked <= { locked[1:0], i_gpio_clk_locked };

	initial	s_reset = 1;
	always @(posedge s_clk)
		s_reset <= 0; // !locked[2];
@MAIN.PORTLIST=
		// Extra clocks
		i_clk_125mhz
@MAIN.IODECL=
		// Extra clocks
	input	wire		i_clk_125mhz;
@MAIN.DEFNS=
	wire	i_net_tx_clk;
@MAIN.INSERT=
	assign	i_net_tx_clk = i_clk_125mhz;
#
@CLOCK.TOP= i_clk_125mhz
@CLOCK.WIRE= i_clk_125mhz
@CLOCK.NAME= clk_125mhz
@CLOCK.FREQUENCY= 125000000
@CLOCK.TOP=
@MAIN.IODECL=
	input	wire		i_net_tx_clk;
