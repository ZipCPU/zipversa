################################################################################
##
## Filename: 	gpio.txt
##
## Project:	ZipVersa, Versa Brd implementation using ZipCPU infrastructure
##
## Purpose:	
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2019, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
@PREFIX=gpio
@DEVID=GPIO
@NADDR=1
@ACCESS=@$(DEVID)_ACCESS
@SLAVE.TYPE=SINGLE
@SLAVE.BUS=wb
@NUMOUTPUT=4
@NUMINPUT=2
@INT.GPIO.WIRE=gpio_int
@INT.GPIO.PIC=@$(SYSPIC)
@TOP.PORTLIST=
		// GPIO ports
		// i_@$(PREFIX), o_@$(PREFIX)
		o_@$(PREFIX)_clk_reset_n,
		// i_@$(PREFIX)_clk_locked,
		io_@$(PREFIX)_clk_scl,
		io_@$(PREFIX)_clk_sda
@TOP.IODECL=
	// GPIO wires
	localparam	NGPI = @$(NUMINPUT), NGPO=@$(NUMOUTPUT);
	// GPIO ports
	// GSRN clk_reset_n (R1), FPGA_WRITEN
	output	wire	o_@$(PREFIX)_clk_reset_n;
	//
	// There doesn't appear to be any true clock locked input.
	// The CLK_LOCK1 pin from the ispCLOCK doesn't go to any pins
	// on the FPGA.  Not quite sure where my info came from to
	// suggest that it would.
	// input	wire	i_@$(PREFIX)_clk_locked;
	inout	wire	io_@$(PREFIX)_clk_scl, io_@$(PREFIX)_clk_sda;
@TOP.DEFNS=
	wire	w_@$(PREFIX)_clk_reset;
	wire	w_@$(PREFIX)_clk_scl, w_@$(PREFIX)_clk_sda,
		w_@$(PREFIX)_halt_sim;
@TOP.INSERT=
	assign	o_@$(PREFIX)_clk_reset_n= !w_@$(PREFIX)_clk_reset;
	// assign	io_@$(PREFIX)_clk_scl = w_@$(PREFIX)_clk_scl ? 1'bz : 1'b0;
	// assign	io_@$(PREFIX)_clk_sda = w_@$(PREFIX)_clk_sda ? 1'bz : 1'b0;
	BB @$(PREFIX)_clk_scli(.I(1'b0), .T(w_@$(PREFIX)_clk_scl),
		.O(io_@$(PREFIX)_clk_scl));
	BB @$(PREFIX)_clk_sdai(.I(1'b0), .T(w_@$(PREFIX)_clk_sda),
		.O(io_@$(PREFIX)_clk_sda));

@TOP.MAIN=
		// GPIO wires
		// @$(NUMINPUT) Inputs first
		{ w_@$(PREFIX)_halt_sim,
			io_@$(PREFIX)_clk_scl, io_@$(PREFIX)_clk_sda },
		// Then the @$(NUMOUTPUT) outputs
		{ w_@$(PREFIX)_clk_reset,
			w_@$(PREFIX)_clk_scl, w_@$(PREFIX)_clk_sda }
@MAIN.PORTLIST=
		// GPIO ports
		i_@$(PREFIX), o_@$(PREFIX)
@MAIN.IODECL=
	localparam	NGPI = @$(NUMINPUT), NGPO=@$(NUMOUTPUT);
	// @$(DEVID) ports
	input		[(NGPI-1):0]	i_@$(PREFIX);
	output	wire	[(NGPO-1):0]	o_@$(PREFIX);
@MAIN.INSERT=
	//
	// @$(DEVID)
	//
	// This interface should allow us to control up to 16 @$(DEVID) inputs, and
	// another 16 @$(DEVID) outputs.  The interrupt trips when any of the inputs
	// changes.  (Sorry, which input isn't (yet) selectable.)
	//
	localparam	INITIAL_@$(DEVID) = @$(NUMOUTPUT)'h3;
	wbgpio	#(NGPI, NGPO, INITIAL_@$(DEVID))
		@$(PREFIX)i(i_clk, 1'b1, (wb_stb)&&(@$(PREFIX)_sel), wb_we,
			wb_data, @$(PREFIX)_data, i_@$(PREFIX), o_@$(PREFIX),
			@$(PREFIX)_int);
@REGS.N=1
@REGS.0= 0 R_@$(DEVID) @$(DEVID) GPI GPO
@BDEF.DEFN=
//
// @$(DEVID) input wires
//
#define	@$(DEVID)_IN(WIRE)	(((WIRE)>>16)&1)
//
// @$(DEVID) output wires
//
#define	@$(DEVID)_SET(WIRE)	(((WIRE)<<16)|(WIRE))
#define	@$(DEVID)_CLR(WIRE)	 ((WIRE)<<16)

#define GPIO_ICLK_SDA		1
#define GPIO_ICLK_SCL		2
#define GPIO_ICLK_LOCKED	4
#define GPIO_ICLK_RESET		4
#define GPIO_HALT_SIM		4
//
//
@BDEF.IONAME=	i_@$(PREFIX)
@BDEF.IOTYPE=	unsigned
@BDEF.OSDEF=	_BOARD_HAS_@$(DEVID)
@BDEF.OSVAL=	static volatile @$.BDEF.IOTYPE *const _@$(PREFIX) = ((@$.BDEF.IOTYPE *)@$REGBASE);
@RTL.MAKE.FILES=wbgpio.v
@RTL.MAKE.GROUP=@$(DEVID)
@SIM.CLOCK=clk
@SIM.TICK=
	if (m_core->o_gpio & 4)
		m_done = true;
