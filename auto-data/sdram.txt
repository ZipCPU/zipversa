################################################################################
##
## Filename: 	sdram.txt
##
## Project:	ZipVersa, Versa Brd implementation using ZipCPU infrastructure
##
## Purpose:	To describe how to provide access to an SDRAM controller
##		from the Wishbone bus, where such SDRAM controller uses a
##	different clock from the Wishbone bus itself.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2019, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
@PREFIX=sdram
@DEVID=SDRAM
@ACCESS=@$(DEVID)_ACCESS
@DEPENDS=ALLCLOCKS_PRESENT
@$LGMEMSZ=29
@LGMEMSZ.FORMAT=%d
@$NADDR=((1<<(LGMEMSZ-4)))
@$NBYTES=(1<<(@$LGMEMSZ))
@NBYTES.FORMAT=0x%08x
@$MADDR= @$(REGBASE)
@MADDR.FORMAT=0x%08x
@SLAVE.TYPE=MEMORY
@SLAVE.BUS=wb
@CLOCK.NAME=clk
@CLOCK.FREQUENCY = 81250000
@BUS=wb
@BUSP=@$(BUS.NAME)
@ERROR.WIRE=@$(PREFIX)_err
# 8-bit byte accesses
@LD.PERM=wx
@TOP.PORTLIST=
		// SDRAM I/O port wires
		ddr3_reset_n, ddr3_cke, ddr3_ck_p, ddr3_ck_n,
		ddr3_cs_n, ddr3_ras_n, ddr3_cas_n, ddr3_we_n,
		ddr3_dqs_p, ddr3_dqs_n,
		ddr3_addr, ddr3_ba,
		ddr3_dq, ddr3_dm, ddr3_odt
@TOP.IODECL=
	// I/O declarations for the DDR3 SDRAM
	output	wire		ddr3_reset_n;
	output	wire	[0:0]	ddr3_cke;
	output	wire	[0:0]	ddr3_ck_p, ddr3_ck_n;
	output	wire	[0:0]	ddr3_cs_n;
	output	wire		ddr3_ras_n, ddr3_cas_n, ddr3_we_n;
	output	wire	[2:0]	ddr3_ba;
	output	wire	[13:0]	ddr3_addr;
	output	wire	[0:0]	ddr3_odt;
	output	wire	[1:0]	ddr3_dm;
	inout	wire	[1:0]	ddr3_dqs_p, ddr3_dqs_n;
	inout	wire	[15:0]	ddr3_dq;

@TOP.DEFNS=
	wire		w_@$(PREFIX)_reset_n, w_@$(PREFIX)_cke;
	wire [1:0]	w_@$(PREFIX)_oe;
	wire [26:0]	w_@$(PREFIX)_cmd_a, w_@$(PREFIX)_cmd_b,
			w_@$(PREFIX)_cmd_c, w_@$(PREFIX)_cmd_d;
	wire [31:0]	o_@$(PREFIX)_data;
	wire [31:0]	i_@$(PREFIX)_data;
@TOP.MAIN=
		w_@$(PREFIX)_reset_n, w_@$(PREFIX)_cke,
		w_@$(PREFIX)_oe,
		w_@$(PREFIX)_cmd_a, w_@$(PREFIX)_cmd_b,
		w_@$(PREFIX)_cmd_c, w_@$(PREFIX)_cmd_d,
		o_@$(PREFIX)_data, i_@$(PREFIX)_data
@TOP.INSERT=
@MAIN.PORTLIST=
		o_@$(PREFIX)_reset_n, o_@$(PREFIX)_cke,
		o_@$(PREFIX)_oe,
		o_@$(PREFIX)_cmd_a, o_@$(PREFIX)_cmd_b,
		o_@$(PREFIX)_cmd_c, o_@$(PREFIX)_cmd_d,
		o_@$(PREFIX)_data, i_@$(PREFIX)_data
@MAIN.IODECL=
	output	wire		o_@$(PREFIX)_reset_n,
				o_@$(PREFIX)_cke;
	output	wire [1:0]	o_@$(PREFIX)_oe;
	output	wire [26:0]	o_@$(PREFIX)_cmd_a, o_@$(PREFIX)_cmd_b,
				o_@$(PREFIX)_cmd_c, o_@$(PREFIX)_cmd_d;
	output	wire [31:0]	o_@$(PREFIX)_data;
	input	wire [31:0]	i_@$(PREFIX)_data;
@MAIN.INSERT=
	wbddrsdram
	@$(PREFIX)i(i_clk, i_reset,
		@$(BUSP)_cyc, @$(BUSP)_stb, @$(BUSP)_we, @$(BUSP)_addr[@$(LGNBYTES)-3:0],
			@$(BUSP)_data, @$(BUSP)_sel,
		@$(PREFIX)_stall, @$(PREFIX)_ack, @$(PREFIX)_data,
		o_@$(PREFIX)_reset_n, o_@$(PREFIX)_cke, o_@$(PREFIX)_oe,
		o_@$(PREFIX)_cmd_a, o_@$(PREFIX)_cmd_b,
		o_@$(PREFIX)_cmd_c, o_@$(PREFIX)_cmd_d,
		o_@$(PREFIX)_data, i_@$(PREFIX)_data);

@REGS.N=1
@REGS.0= 0 R_@$(DEVID) @$(DEVID)
@REGDEFS.H.DEFNS=
#define	@$(DEVID)BASE	@$[0x%08x](REGBASE)
#define	@$(DEVID)LEN	@$(NBYTES)
@BDEF.OSDEF=_BOARD_HAS_@$(DEVID)
@BDEF.OSVAL=extern char	_@$(PREFIX)[@$NBYTES];
@LDSCRIPT.PSTR=	wx
@LDSCRIPT.PTR=	@$(PREFIX)
@LDSCRIPT.DEF=
_@$(PREFIX) = ORIGIN(@$(PREFIX));
@SIM.INCLUDE=
// #include "ddrsdramsim.h"
@SIM.DEFNS=
#ifdef	@$(ACCESS)
	// DDRSDRAMSIM	*m_@$(PREFIX);
#endif	// @$(ACCESS)
@SIM.INIT=
#ifdef	@$(ACCESS)
		m_@$(PREFIX) = new DDRSDRAMSIM(@$(NBYTES));
#endif	// @$(ACCESS)
@SIM.CLOCK=@$(SLAVE.BUS.CLOCK.NAME)
@SIM.TICK=
#ifdef	@$(ACCESS)
		// DDR3 SDRAM simulator would go here
		// m_@$(PREFIX)();
#endif	// @$(ACCESS)
@SIM.LOAD=
#ifdef	@$(ACCESS)
		m_@$(PREFIX)->load(start, &buf[offset], wlen);
#endif // @$(ACCESS)

