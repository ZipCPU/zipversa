################################################################################
##
## Filename: 	enet.txt
##
## Project:	ZipVersa, Versa Brd implementation using ZipCPU infrastructure
##
## Purpose:	
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2019, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
## Be able to support 2^11, or 2048 byte packets
@$LGPKTBUFSZB=11
##
@PREFIX=netb
@$LGBUFSZ=@$(/LGPKTBUFSZB)
@$MEMORY_ADDRESS_WIDTH=@$(LGBUFSZ)
@$NADDR=(1<<@$MEMORY_ADDRESS_WIDTH)/2
@SLAVE.TYPE=OTHER
@SLAVE.BUS=wb
@MAIN.INSERT=
`ifndef	NET1_ACCESS
	// Ethernet packet memory declaration
	//
	// The only time this needs to be defined is when the ethernet module
	// itself isnt defined.  Otherwise, the access is accomplished by the
	// ethernet module

	memdev #(@$(MEMORY_ADDRESS_WIDTH))
		enet_buffers(i_clk,
			(wb_cyc), (wb_stb)&&(@$(PREFIX)_sel),
				(wb_we)&&(wb_addr[@$(MEMORY_ADDRESS_WIDTH)-1]),
				wb_addr[@$(MEMORY_ADDRESS_WIDTH)-2:0], wb_data, wb_sel,
				@$(PREFIX)_stall, @$(PREFIX)_ack, @$(PREFIX)_data);

`else

	assign	@$(PREFIX)_ack   = 1'b0;
	assign	@$(PREFIX)_stall = 1'b0;
	assign	@$(PREFIX)_data  = net1_data;

`endif

@REGS.N=2
@REGS.0= 0	R_NET_RXBUF NETRXB
@$TXREG=(1<< @$(MEMORY_ADDRESS_WIDTH))/4
@REGS.1= @$(TXREG) R_NET_TXBUF NETTXB
@BDEF.IONAME=_@$(PREFIX)
@BDEF.OSDEF=_BOARD_HAS_ENETB
@BDEF.OSVAL=
static volatile unsigned *const @$(BDEF.IONAME)rx = ((unsigned *)@$[0x%08x](REGBASE));
static volatile unsigned *const @$(BDEF.IONAME)tx = ((unsigned *)(@$[0x%08x](REGBASE) + (@$[0x%04x](NADDR)<<1)));
##
##
##
@PREFIX=net1
@DEVID=NET1
@ACCESS=@$(DEVID)_ACCESS
@NETB= netb
@MAWB= @$(netb.MEMORY_ADDRESS_WIDTH)
@$LGBUFSZ=@$(/LGPKTBUFSZB)
@INT.NETRX.WIRE=@$(PREFIX)rx_int
@INT.NETTX.WIRE=@$(PREFIX)tx_int
@INT.NETRX.PIC=@$(SYSPIC) buspic
@INT.NETTX.PIC=@$(SYSPIC) buspic
@NADDR=8
@SLAVE.TYPE=OTHER
@SLAVE.BUS=wb
@TOP.PORTLIST=
		// Ethernet control (packets) lines
		o_@$(PREFIX)_reset_n,
		// eth_int_b	// Interrupt, leave floating
		// eth_pme_b	// Power management event, leave floating
		i_@$(PREFIX)_rx_clk, i_@$(PREFIX)_rx_ctl, i_@$(PREFIX)_rxd,
		o_@$(PREFIX)_tx_clk, o_@$(PREFIX)_tx_ctl, o_@$(PREFIX)_txd,
		o_@$(PREFIX)_config
@TOP.IODECL=
	// Ethernet (RGMII) port wires
	output	wire		o_@$(PREFIX)_reset_n;
	input	wire		i_@$(PREFIX)_rx_clk, i_@$(PREFIX)_rx_ctl;
	input	wire	[3:0]	i_@$(PREFIX)_rxd;
	output	wire		o_@$(PREFIX)_tx_clk, o_@$(PREFIX)_tx_ctl;
	output	wire	[3:0]	o_@$(PREFIX)_txd;
	output	wire		o_@$(PREFIX)_config;
@TOP.DEFNS=
	// Ethernet (RGMII) port wires
	wire	[7:0]		w_@$(PREFIX)_rxd,  w_@$(PREFIX)_txd;
	wire			w_@$(PREFIX)_rxdv, w_@$(PREFIX)_rxerr,
				w_@$(PREFIX)_txctl;
	wire	[1:0]		w_@$(PREFIX)_tx_clk;
@TOP.MAIN=
		// Ethernet (RGMII) connections
		o_@$(PREFIX)_reset_n,
		i_@$(PREFIX)_rx_clk, w_@$(PREFIX)_rxdv,  w_@$(PREFIX)_rxdv ^ w_@$(PREFIX)_rxerr, w_@$(PREFIX)_rxd,
		w_@$(PREFIX)_tx_clk, w_@$(PREFIX)_txctl, w_@$(PREFIX)_txd
@TOP.INSERT=
	ecpiddr	rx0(i_@$(PREFIX)_rx_clk, i_@$(PREFIX)_rxd[0], { w_@$(PREFIX)_rxd[4], w_@$(PREFIX)_rxd[0] });
	ecpiddr	rx1(i_@$(PREFIX)_rx_clk, i_@$(PREFIX)_rxd[1], { w_@$(PREFIX)_rxd[5], w_@$(PREFIX)_rxd[1] });
	ecpiddr	rx2(i_@$(PREFIX)_rx_clk, i_@$(PREFIX)_rxd[2], { w_@$(PREFIX)_rxd[6], w_@$(PREFIX)_rxd[2] });
	ecpiddr	rx3(i_@$(PREFIX)_rx_clk, i_@$(PREFIX)_rxd[3], { w_@$(PREFIX)_rxd[7], w_@$(PREFIX)_rxd[3] });
	ecpiddr	rxc(i_@$(PREFIX)_rx_clk, i_@$(PREFIX)_rx_ctl, { w_@$(PREFIX)_rxdv,   w_@$(PREFIX)_rxerr });

	ecpoddr	tx0(s_clk_125mhz, { w_@$(PREFIX)_txd[0], w_@$(PREFIX)_txd[4] }, o_@$(PREFIX)_txd[0]);
	ecpoddr	tx1(s_clk_125mhz, { w_@$(PREFIX)_txd[1], w_@$(PREFIX)_txd[5] }, o_@$(PREFIX)_txd[1]);
	ecpoddr	tx2(s_clk_125mhz, { w_@$(PREFIX)_txd[2], w_@$(PREFIX)_txd[6] }, o_@$(PREFIX)_txd[2]);
	ecpoddr	tx3(s_clk_125mhz, { w_@$(PREFIX)_txd[3], w_@$(PREFIX)_txd[7] }, o_@$(PREFIX)_txd[3]);
	ecpoddr	txc(s_clk_125mhz, { w_@$(PREFIX)_txctl,  w_@$(PREFIX)_txctl  }, o_@$(PREFIX)_tx_ctl);
	ecpoddr	txck(s_clk_125d,{w_@$(PREFIX)_tx_clk[1],w_@$(PREFIX)_tx_clk[0]},o_@$(PREFIX)_tx_clk);

	assign	o_@$(PREFIX)_config = 1'b0;
@MAIN.PORTLIST=
		// Ethernet control (packets) lines
		o_@$(PREFIX)_reset_n,
		// eth_int_b	// Interrupt, leave floating
		// eth_pme_b	// Power management event, leave floating
		i_@$(PREFIX)_rx_clk, i_@$(PREFIX)_rx_dv, i_@$(PREFIX)_rx_err, i_@$(PREFIX)_rxd,
		o_@$(PREFIX)_tx_clk, o_@$(PREFIX)_tx_ctl, o_@$(PREFIX)_txd
@MAIN.IODECL=
	// Ethernet (RGMII) control
	output	wire		o_@$(PREFIX)_reset_n;
	input	wire		i_@$(PREFIX)_rx_clk, i_@$(PREFIX)_rx_dv, i_@$(PREFIX)_rx_err;
	input	wire	[7:0]	i_@$(PREFIX)_rxd;
	output	wire	[1:0]	o_@$(PREFIX)_tx_clk;
	output	wire		o_@$(PREFIX)_tx_ctl;
	output	wire	[7:0]	o_@$(PREFIX)_txd;
@MAIN.DEFNS=
	//
	wire		@$(PREFIX)_debug_clk;
	wire	[31:0]	@$(PREFIX)_debug;
@MAIN.INSERT=
	enetpackets	#(.MEMORY_ADDRESS_WIDTH(@$(MAWB)),
			.OPT_ENDIANSWAP(!OPT_BIGENDIAN))
		@$(PREFIX)i(i_clk, i_reset,
			wb_cyc,(wb_stb)&&((@$(PREFIX)_sel)||(@$(NETB)_sel)),
			wb_we, { (@$(NETB)_sel), wb_addr[@$(MAWB)-2:0] }, wb_data, wb_sel,
				@$(PREFIX)_stall, @$(PREFIX)_ack, @$(PREFIX)_data,
			o_@$(PREFIX)_reset_n,
			i_@$(PREFIX)_rx_clk, i_@$(PREFIX)_rx_dv, i_@$(PREFIX)_rx_err, i_@$(PREFIX)_rxd,
			// For some reason, this 125MHz clock isn't being
			// generated (??)
			//
			// i_clk_125mhz,
			i_@$(PREFIX)_rx_clk,
			o_@$(PREFIX)_tx_clk, o_@$(PREFIX)_tx_ctl, o_@$(PREFIX)_txd,
			@$(PREFIX)rx_int, @$(PREFIX)tx_int, @$(PREFIX)_debug_clk, @$(PREFIX)_debug);

@REGS.N=8
@REGS.0= 0 R_NET_RXCMD	RXCMD,NETRX
@REGS.1= 1 R_NET_TXCMD	TXCMD,NETTX
@REGS.2= 2 R_NET_MACHI	MACHI
@REGS.3= 3 R_NET_MACLO	MACLO
@REGS.4= 4 R_NET_RXMISS	NETMISS
@REGS.5= 5 R_NET_RXERR	NETERR
@REGS.6= 6 R_NET_RXCRC	NETCRCER
@REGS.7= 7 R_NET_TXCOL	NETCOL
@REGDEFS.H.INSERT=
// Network packet interface
#define	ENET_TXGO		0x004000
#define	ENET_TXBUSY		0x004000
#define	ENET_NOHWCRC		0x008000
#define	ENET_NOHWMAC		0x010000
#define	ENET_RESET		0x020000
#define	ENET_NOHWIPCHK		0x040000
#define	ENET_TXCMD(LEN)		((LEN)|ENET_TXGO)
#define	ENET_TXCLR		0x038000
#define	ENET_TXCANCEL		0x000000
#define	ENET_RXAVAIL		0x004000
#define	ENET_RXBUSY		0x008000
#define	ENET_RXMISS		0x010000
#define	ENET_RXERR		0x020000
#define	ENET_RXCRC		0x040000	// Set on a CRC error
#define	ENET_RXLEN(CMD)		((CMD) & 0x0ffff)
#define	ENET_RXCLR		0x004000
#define	ENET_RXBROADCAST	0x080000
#define	ENET_RXCLRERR		0x078000

@BDEF.DEFN=
// Network packet interface
#define	ENET_TXGO		0x004000
#define	ENET_TXBUSY		0x004000
#define	ENET_NOHWCRC		0x008000
#define	ENET_NOHWMAC		0x010000
#define	ENET_RESET		0x020000
#define	ENET_NOHWIPCHK		0x040000
#define	ENET_TXCMD(LEN)		((LEN)|ENET_TXGO)
#define	ENET_TXCLR		0x038000
#define	ENET_TXCANCEL		0x000000
#define	ENET_RXAVAIL		0x004000
#define	ENET_RXBUSY		0x008000
#define	ENET_RXMISS		0x010000
#define	ENET_RXERR		0x020000
#define	ENET_RXCRC		0x040000	// Set on a CRC error
#define	ENET_RXLEN(CMD)		((CMD) & 0x0ffff)
#define	ENET_RXCLR		0x004000
#define	ENET_RXBROADCAST	0x080000
#define	ENET_RXCLRERR		0x078000
#define	ENET_TXBUFLN(NET)	(1<<(NET->n_txcmd>>24))
#define	ENET_RXBUFLN(NET)	(1<<(NET->n_rxcmd>>24))
typedef	struct ENETPACKET_S {
	unsigned	n_rxcmd, n_txcmd;
	uint64_t	n_mac;
	unsigned	n_rxmiss, n_rxerr, n_rxcrc, n_txcol;
} ENETPACKET;

#define	SYSINT_ENETRX	SYSINT(@$(INT.NETRX.picorv.ID))
#define	SYSINT_ENETTX	SYSINT(@$(INT.NETTX.picorv.ID))

@SIM.CLOCK=clk_125mhz
@SIM.TICK=
		m_core->i_@$(PREFIX)_rx_dv  = m_core->o_@$(PREFIX)_tx_ctl;
		m_core->i_@$(PREFIX)_rx_err = 0;
		m_core->i_@$(PREFIX)_rxd    = m_core->o_@$(PREFIX)_txd;

@BDEF.IONAME=io_enet
@BDEF.IOTYPE=ENETPACKET
@BDEF.OSDEF=_BOARD_HAS_ENETP
@BDEF.OSVAL=static volatile @$(BDEF.IOTYPE) *const _@$(PREFIX) = ((ENETPACKET *)@$[0x%08x](REGBASE));
@RTL.MAKE.GROUP=ENET
@RTL.MAKE.SUBD=enet
@RTL.MAKE.FILES= enetpackets.v
	addecrc.v addemac.v addepad.v addepreamble.v txespeed.v txeaddr.v
	rxecrc.v rxehwmac.v rxeipchk.v rxemin.v rxepreambl.v rxewrite.v
	ecpiddr.v ecpoddr.v
@CLOCK.NAME=@$(PREFIX)_rx_clk
@$CLOCK.FREQUENCY=125000000
@XDC.INSERT=
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/tx*}]              -to [get_cells -hier -filter {NAME=~*netctrl/n_tx*}]               8.0
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/hw_mac*}]          -to [get_cells -hier -filter {NAME=~*netctrl/txmaci/r_hw*}]        8.0
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/tfrtxspd/r_aval*}] -to [get_cells -hier -filter {NAME=~*netctrl/tfrtxspd/r_val*}]     8.0
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/config_hw_mac*}]   -to [get_cells -hier -filter {NAME=~*netctrl/n_tx_config_hw_mac*}] 8.0
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/config_hw_crc*}]   -to [get_cells -hier -filter {NAME=~*netctrl/n_tx_config_hw_crc*}] 8.0
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/tfrtxspd/r_*}]     -to [get_cells -hier -filter {NAME=~*netctrl/tfrtxspd/q_*}]        8.0
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/tx_cmd*}]          -to [get_cells -hier -filter {NAME=~*netctrl/r_tx_cmd*}]           8.0
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/tx_cancel*}]       -to [get_cells -hier -filter {NAME=~*netctrl/r_tx_cancel*}]        8.0
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/n_still_busy*}]    -to [get_cells -hier -filter {NAME=~*netctrl/r_tx_busy*}]          8.0
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/txspdi/o_ck*}]    -to [get_cells -hier -filter {NAME=~*txck/ODDRi*}]          8.0
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *o_sys_reset*}]            -to [get_cells -hier -filter {NAME=~*netctrl/q_tx_reset*}]          8.0
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *o_sys_reset*}]            -to [get_cells -hier -filter {NAME=~*netctrl/q_rx_reset*}]          8.0
#
@PREFIX=tfr
@RTL.MAKE.GROUP=TFRVALUE
@RTL.MAKE.FILES= tfrvalue.v
