################################################################################
##
## Filename: 	picorv.txt
##
## Project:	ZipVersa, Versa Brd implementation using ZipCPU infrastructure
##
## Purpose:	Includes a PICORV32 into the design, in place ZipCPU
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2019, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
@PREFIX=picorv
@DEVID=RVCPU
@NADDR=1
@ACCESS=INCLUDE_PICORV
@DBGBUS=wbu
@MASTER.TYPE=CPU
@MASTER.BUS=cpu
@BUS.NAME=cpu
@BUS.WIDTH=32
@BUS.CLOCK=clk
@CPURESET=i_cpu_reset
@$RESET_ADDRESS=@$(bkram.REGBASE)
@$STACK_ADDRESS=@$(bkram.REGBASE)+@$(bkram.NADDR)*4
@INT.CPU.WIRE=cpu_int
@INT.CPU.BUS=buspic
@BUSN=@$(BUS.NAME)
@MAIN.PARAM=
@MAIN.DEFNS=
	reg	[31:0]	@$(PREFIX)_int_vector;
@MAIN.INSERT=
	wb_picorv32 #(.PROGADDR_RESET(@$(RESET_ADDRESS)),
			.STACKADDR(@$(STACK_ADDRESS)))
		rvcpu(@$(PREFIX)_trap,
			i_clk, cpu_reset,
			@$(BUSN)_cyc, @$(BUSN)_stb, @$(BUSN)_we,
				@$(BUSN)_addr, @$(BUSN)_data, @$(BUSN)_sel,
			@$(BUSN)_stall, @$(BUSN)_ack, @$(BUSN)_data,
			@$(BUSN)_err,
			@$(PREFIX)_int_vector);


@SLAVE.TYPE=SINGLE
@SLAVE.BUS=wb
@ACCESS=@$(DEVID)_ACCESS
@INT.SPIO.WIRE=@$(PREFIX)_int
@INT.SPIO.PIC=buspic
@NLED=8
@NBTN=1
@NSW=8
@MAIN.PORTLIST=
		// SPIO interface
		i_sw, i_btn, o_led
@MAIN.IODECL=
	// @$(DEVID) interface
	input	wire	[@$(NSW)-1:0]	i_sw;
	input	wire	[@$(NBTN)-1:0]	i_btn;
	output	wire	[@$(NLED)-1:0]	o_led;
@MAIN.INSERT=
	spio #(.NBTN(@$(NBTN)), .NLEDS(@$(NLED)), .NSW(@$(NSW))) @$(PREFIX)i(i_clk,
		wb_cyc, (wb_stb)&&(@$(PREFIX)_sel), wb_we, wb_data, wb_sel,
			@$(PREFIX)_ack, @$(PREFIX)_stall, @$(PREFIX)_data,
		i_sw, i_btn, o_led, @$(PREFIX)_int);
@MAIN.ALT=
	assign	o_led = 0;
@REGS.N=1
@REGS.0= 0 R_@$(DEVID) @$(DEVID)
@BDEF.DEFN=
@BDEF.IONAME=_@$(PREFIX)
@BDEF.IOTYPE=unsigned
@BDEF.OSDEF= _BOARD_HAS_@$(DEVID)
@BDEF.OSVAL= static volatile @$(BDEF.IOTYPE) *const @$(BDEF.IONAME) = ((@$(BDEF.IOTYPE) *)@$REGBASE);
@RTL.MAKE.GROUP=SPIO
@RTL.MAKE.FILES=spio.v debouncer.v ledbouncer.v
