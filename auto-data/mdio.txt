################################################################################
##
## Filename: 	mdio.txt
##
## Project:	ZipVersa, Versa Brd implementation using ZipCPU infrastructure
##
## Purpose:	This file describes how the network MDIO core is to be 
##		connected to the rest of the design, for use by the autofpga
##	program.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2019, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
@PREFIX=mdio
@NADDR=32
@DEVID=MDIO
@DEVCLASS=MDIO
@ACCESS=NETCTRL_ACCESS
@SLAVE.TYPE=OTHER
@SLAVE.BUS=wb
@MDCLK=o_eth_mdclk
@MDDAT=io_eth_mdclk
@PHYADDR=5'h01
@TOP.PORTLIST=
		// Toplevel ethernet @$(DEVID) ports
		@$(MDCLK), @$(MDDAT)
@TOP.IODECL=
	// Ethernet control (@$(DEVID))
	output	wire		@$(MDCLK);
	inout	wire		@$(MDDAT);
@TOP.DEFNS=
	// Ethernet control (@$(DEVID))
	wire		w_@$(PREFIX)_dat, w_@$(PREFIX)_we;
	wire		i_@$(PREFIX);
@TOP.MAIN=
		@$(MDCLK), w_@$(PREFIX)_dat, w_@$(PREFIX)_we, i_@$(PREFIX)
@TOP.INSERT=
	// What I want ...
	// assign	@$(MDDAT) = (w_@$(PREFIX)_we) ? w_@$(PREFIX)_dat : 1'bz;
	// assign	i_@$(PREFIX) = @$(MDDAT)
	//
	// Trellis bi-directional I/O primitive: BB
	BB @$(PREFIX)dati(.I(w_@$(PREFIX)_dat), .T(!w_@$(PREFIX)_we),
			.O(i_@$(PREFIX)), .B(@$(MDDAT)));
@MAIN.PORTLIST=
		// The ethernet @$(DEVID) wires
		@$(MDCLK), o_@$(PREFIX), o_@$(PREFIX)_we, i_@$(PREFIX)
@MAIN.IODECL=
	// Ethernet control (@$(DEVID))
	output	wire		@$(MDCLK), o_@$(PREFIX), o_@$(PREFIX)_we;
	input	wire		i_@$(PREFIX);
@MAIN.INSERT=
	wire[31:0]	@$(PREFIX)_debug;
	enetctrl #(.CLKBITS(2), .PHYADDR(@$(PHYADDR)))
		@$(PREFIX)i(i_clk, i_reset, wb_cyc, (wb_stb)&&(@$(PREFIX)_sel), wb_we,
				wb_addr[4:0], wb_data[15:0],
			@$(PREFIX)_stall, @$(PREFIX)_ack, @$(PREFIX)_data,
			@$(MDCLK), o_@$(PREFIX), i_@$(PREFIX), o_@$(PREFIX)_we, @$(PREFIX)_debug);
@MAIN.ALT=
	assign	@$(MDCLK) = 1'b1;
	assign	o_@$(PREFIX)  = 1'b1;
	assign	o_@$(PREFIX)_we  = 1'b0;
@REGS.NOTE= // Ethernet configuration @$(DEVID) port
@REGS.N=11
@REGS.0=  0 R_@$(DEVID)_BMCR  	BMCR
@REGS.1=  1 R_@$(DEVID)_BMSR 	BMSR
@REGS.2=  2 R_@$(DEVID)_PHYIDR1	PHYIDR1
@REGS.3=  3 R_@$(DEVID)_PHYIDR2	PHYIDR2
@REGS.4=  4 R_@$(DEVID)_ANAR		ANAR
@REGS.5=  5 R_@$(DEVID)_ANLPAR	ANLPAR
# // 5 is also the ANLPARNP register
@REGS.6=  6 R_@$(DEVID)_ANER		ANER
@REGS.7=  7 R_@$(DEVID)_ANNPTR	ANNPTR
@REGS.8=  8 R_@$(DEVID)_ANNPRR	ANNPRR
@REGS.9=  9 R_@$(DEVID)_GBECTRL	GBECTRL
@REGS.10=10 R_@$(DEVID)_GBESTAT	GBESTAT
# // Registers 8-15 are reserved, and so not defined here
# @REGS.8= 16 R_@$(DEVID)_PHYSTS	PHYSYTS
# // Registers 17-19 are reserved
# @REGS.9= 20 R_@$(DEVID)_FCSCR	FCSCR
# @REGS.10=21 R_@$(DEVID)_RECR		RECR
# @REGS.11=22 R_@$(DEVID)_PCSR		PCSR
# @REGS.12=23 R_@$(DEVID)_RBR		RBR
# @REGS.13=24 R_@$(DEVID)_LEDCR	LEDCR
# @REGS.14=25 R_@$(DEVID)_PHYCR	PHYCR
# @REGS.15=26 R_@$(DEVID)_BTSCR	BTSCR
# @REGS.16=27 R_@$(DEVID)_CDCTRL	CDCTRL
# // 28 is reserved
# @REGS.17=29 R_@$(DEVID)_EDCR		EDCR
@BDEF.DEFN=
//
// The Ethernet @$(DEVID) interface
//
#define @$(DEVID)_BMCR	0x00
#define @$(DEVID)_BMSR	0x01
#define @$(DEVID)_PHYIDR1	0x02
#define @$(DEVID)_PHYIDR2	0x03
#define @$(DEVID)_ANAR	0x04
#define @$(DEVID)_ANLPAR	0x05
#define @$(DEVID)_ANLPARNP	0x05	// Duplicate register address
#define @$(DEVID)_ANER	0x06
#define @$(DEVID)_ANNPTR	0x07
#define @$(DEVID)_PHYSTS	0x10
#define @$(DEVID)_FCSCR	0x14
#define @$(DEVID)_RECR	0x15
#define @$(DEVID)_PCSR	0x16
#define @$(DEVID)_RBR	0x17
#define @$(DEVID)_LEDCR	0x18
#define @$(DEVID)_PHYCR	0x19
#define @$(DEVID)_BTSCR	0x1a
#define @$(DEVID)_CDCTRL	0x1b
#define @$(DEVID)_EDCR	0x1d

#ifndef	@$(DEVCLASS)_H
#define	@$(DEVCLASS)_H

typedef struct ENET@$(DEVCLASS)_S {
	unsigned	e_v[32];
} ENET@$(DEVCLASS);

#endif // @$(DEVCLASS)_H

@BDEF.IOTYPE= ENET@$(DEVCLASS)
@BDEF.IONAME= _net@$(PREFIX)
@BDEF.OSDEF= _BOARD_HAS_NET@$(DEVID)
@BDEF.OSVAL= static volatile @$THIS.BDEF.IOTYPE *const _@$(PREFIX) = ((@$THIS.BDEF.IOTYPE *)@$THIS.BASE);
@SIM.CLOCK=clk
@SIM.INCLUDE=
#include "enetctrlsim.h"
@SIM.DEFNS=
#ifdef	@$(ACCESS)
	ENETCTRLSIM	*m_@$(PREFIX);
#endif // @$(ACCESS)
@SIM.INIT=
#ifdef	@$(ACCESS)
		m_@$(PREFIX) = new ENETCTRLSIM;
#endif // @$(ACCESS)
@SIM.TICK=
#ifdef	@$(ACCESS)
		m_core->i_@$(PREFIX) = (*m_@$(PREFIX))(0, m_core->@$(MDCLK),
				((m_core->o_@$(PREFIX)_we)&&(!m_core->o_@$(PREFIX)))?0:1);
#else
		m_core->i_@$(PREFIX) = ((m_core->o_@$(PREFIX)_we)&&(!m_core->o_@$(PREFIX)))?0:1;
#endif // @$(ACCESS)
@RTL.MAKE.GROUP=ENET@$(DEVCLASS)
@RTL.MAKE.FILES=enetctrl.v
